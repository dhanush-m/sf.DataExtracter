import { SFMC_Client } from '../types/sfmc_client';
export declare class ContentBuilder {
    sfmc: SFMC_Client;
    constructor(sfmc: SFMC_Client);
    /**
     *
     * @param request.contentType
     * @param request.searchKey
     * @param request.searchTerm
     *
     * ```
     *  {
     *      contentType: '',
     *      searchKey: '',
     *      searchTerm: ''
     *  }
     * ```
     *
     * Output
     * ```
     * [{
     *      Name: string;
     *      ID: number;
     *      CreatedDate: string;
     *      ModifiedDate: string;
     *      ParentFolder: {
     *          Name: string;
     *          ID: string;
     *      }
     *  }]
     * ```
     */
    searchFolders: (request: {
        contentType: string;
        searchKey: string;
        searchTerm: string;
    }) => Promise<any>;
    /**
     *
     * @param request.searchKey
     * @param request.searchTerm
     *
     * ```
     *  {
     *      searchKey: '',
     *      searchTerm: ''
     *  }
     * ```
     *
     * Output
     * ```
     * [{
     *      ID: number,
     *      Name: string,
     *      AssetType: string,
     *      CreatedDate: string,
     *      ModifiedDate: string,
     *      Category: {
     *          Name: string,
     *          ParentId: number
     *      }
     *  }]
     * ```
     */
    searchAssets: (request: {
        searchKey: string;
        searchTerm: string;
    }) => Promise<any>;
    /**
     *
     * @param request.searchKey
     * @param request.searchTerm
     *
     * ```
     *  {
     *      searchKey: '',
     *      searchTerm: ''
     *  }
     * ```
     *
     * Output
     * ```
     * [{
     *      ID: number,
     *      Name: string,
     *      AssetType: string,
     *      CreatedDate: string,
     *      ModifiedDate: string,
     *      Category: {
     *          Name: string,
     *          ParentId: number
     *      }
     *  }]
     * ```
     */
    gatherAssetsByCategoryId: (request: {
        contentType: string;
        categoryId: number;
    }, shared?: boolean) => Promise<{
        folders: {
            id: any;
            name: any;
            parentId: any;
            folderPath: any;
        }[];
        assets: import("../types/bldr_assets/sfmc_content_builder_asset").BLDR_SFMC_Content_Builder_Asset | import("../types/bldr_assets/sfmc_content_builder_asset").BLDR_SFMC_Content_Builder_Asset[];
        rawAssets: any;
        status?: undefined;
        statusMessage?: undefined;
    } | {
        status: string;
        statusMessage: any;
        folders?: undefined;
        assets?: undefined;
        rawAssets?: undefined;
    }>;
    /**
     *
     * @param assetId
     */
    gatherAssetById: (assetId: number, legacy?: Boolean, shared?: boolean) => Promise<any>;
    /**
     *
     * @param asset
     * @param content
     * @returns
     */
    updateContentBuilderAssetContent: (asset: any, content: string) => any;
    setContentBuilderPackageAssets: (packageOut: any, contextAssets: any[]) => Promise<{
        id: any;
        bldrId: any;
        name: any;
        assetType: any;
        category: {
            folderPath: any;
        };
        content: any;
    }[]>;
    /**
     *
     * @param packageOut
     */
    setContentBuilderDependenciesFromPackage: (packageOut: any) => Promise<{
        newDependencies: {
            [key: string]: any;
        };
        packageOut: any;
    } | undefined>;
}
