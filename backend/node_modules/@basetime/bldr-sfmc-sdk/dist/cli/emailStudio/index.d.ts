import { SFMC_Client } from '../types/sfmc_client';
export declare class EmailStudio {
    sfmc: SFMC_Client;
    constructor(sfmc: SFMC_Client);
    /**
     *
     * @param request.contentType
     * @param request.searchKey
     * @param request.searchTerm
     *
     * ```
     *  {
     *      contentType: '',
     *      searchKey: '',
     *      searchTerm: ''
     *  }
     * ```
     *
     * Output
     * ```
     * [{
     *      Name: string;
     *      ID: number;
     *      CreatedDate: string;
     *      ModifiedDate: string;
     *      ParentFolder: {
     *          Name: string;
     *          ID: string;
     *      }
     *  }]
     * ```
     */
    searchFolders: (request: {
        contentType: string;
        searchKey: string;
        searchTerm: string;
    }) => Promise<any>;
    /**
     *
     * @param request.contentType
     * @param request.searchKey
     * @param request.searchTerm
     *
     * ```
     *  {
     *      contentType: '',
     *      searchKey: '',
     *      searchTerm: ''
     *  }
     * ```
     *
     * Output
     * ```
     * [{
     *      Name: string;
     *      ID: number;
     *      CreatedDate: string;
     *      ModifiedDate: string;
     *      ParentFolder: {
     *          Name: string;
     *          ID: string;
     *      }
     *  }]
     * ```
     */
    searchDataExtensions: (request: {
        searchKey: string;
        searchTerm: string;
    }) => Promise<any>;
    /**
     *
     * @param request.searchKey
     * @param request.searchTerm
     *
     * ```
     *  {
     *      searchKey: '',
     *      searchTerm: ''
     *  }
     * ```
     *
     * Output
     * ```
     * [{
     *      ID: number,
     *      Name: string,
     *      AssetType: string,
     *      CreatedDate: string,
     *      ModifiedDate: string,
     *      Category: {
     *          Name: string,
     *          ParentId: number
     *      }
     *  }]
     * ```
     */
    gatherAssetsByCategoryId: (request: {
        contentType: string;
        categoryId: number;
    }, complete?: boolean) => Promise<any>;
    /**
     *
     * @param assetId
     */
    gatherAssetById: (customerKey: string, complete?: boolean, shared?: boolean) => Promise<{
        folders: {
            id: any;
            name: any;
            parentId: any;
            folderPath: any;
        }[];
        assets: any[];
        status?: undefined;
        statusMessage?: undefined;
    } | {
        status: string;
        statusMessage: any;
        folders?: undefined;
        assets?: undefined;
    }>;
}
