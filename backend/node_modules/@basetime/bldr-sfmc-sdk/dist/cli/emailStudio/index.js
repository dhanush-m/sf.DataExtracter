"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailStudio = void 0;
const BuildSoapFolderObjects_1 = require("../utils/BuildSoapFolderObjects");
class EmailStudio {
    constructor(sfmc) {
        /**
         *
         * @param request.contentType
         * @param request.searchKey
         * @param request.searchTerm
         *
         * ```
         *  {
         *      contentType: '',
         *      searchKey: '',
         *      searchTerm: ''
         *  }
         * ```
         *
         * Output
         * ```
         * [{
         *      Name: string;
         *      ID: number;
         *      CreatedDate: string;
         *      ModifiedDate: string;
         *      ParentFolder: {
         *          Name: string;
         *          ID: string;
         *      }
         *  }]
         * ```
         */
        this.searchFolders = (request) => __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sfmc.folder.search(request);
            if (response.OverallStatus !== 'OK') {
                return response.OverallStatus;
            }
            const formattedResponse = (response &&
                response.Results &&
                response.Results.length &&
                response.Results.map((folder) => {
                    return {
                        ID: folder.ID,
                        Name: folder.Name,
                        CreatedDate: folder.CreatedDate,
                        ModifiedDate: folder.ModifiedDate,
                        ParentFolder: {
                            Name: folder.ParentFolder.Name,
                            ID: folder.ParentFolder.ID,
                        },
                    };
                })) ||
                [];
            return formattedResponse;
        });
        /**
         *
         * @param request.contentType
         * @param request.searchKey
         * @param request.searchTerm
         *
         * ```
         *  {
         *      contentType: '',
         *      searchKey: '',
         *      searchTerm: ''
         *  }
         * ```
         *
         * Output
         * ```
         * [{
         *      Name: string;
         *      ID: number;
         *      CreatedDate: string;
         *      ModifiedDate: string;
         *      ParentFolder: {
         *          Name: string;
         *          ID: string;
         *      }
         *  }]
         * ```
         */
        this.searchDataExtensions = (request) => __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sfmc.emailStudio.searchDataExtensionByName(request);
            if (response.OverallStatus !== 'OK') {
                return response.OverallStatus;
            }
            const formattedResponse = (response &&
                response.Results &&
                response.Results.length &&
                response.Results.map((dataExtension) => {
                    return {
                        CustomerKey: dataExtension.CustomerKey,
                        Name: dataExtension.Name,
                        CreatedDate: dataExtension.CreatedDate,
                        ModifiedDate: dataExtension.ModifiedDate,
                        CategoryID: dataExtension.CategoryID,
                    };
                })) ||
                [];
            return formattedResponse;
        });
        /**
         *
         * @param request.searchKey
         * @param request.searchTerm
         *
         * ```
         *  {
         *      searchKey: '',
         *      searchTerm: ''
         *  }
         * ```
         *
         * Output
         * ```
         * [{
         *      ID: number,
         *      Name: string,
         *      AssetType: string,
         *      CreatedDate: string,
         *      ModifiedDate: string,
         *      Category: {
         *          Name: string,
         *          ParentId: number
         *      }
         *  }]
         * ```
         */
        this.gatherAssetsByCategoryId = (request, complete = false) => __awaiter(this, void 0, void 0, function* () {
            try {
                const shared = request.contentType === 'shared_dataextension' ? true : false;
                const rootParentName = shared
                    ? 'Shared Data Extensions'
                    : 'Data Extensions';
                const folderResponse = yield this.sfmc.folder.getFoldersFromMiddle(request);
                const isolateFolderIds = (folderResponse &&
                    folderResponse.full &&
                    folderResponse.full.length &&
                    folderResponse.full
                        .map((folder) => folder.Name !== rootParentName && folder.ID)
                        .filter(Boolean)) ||
                    [];
                const assetsAndFoldersRequest = yield Promise.all([
                    (0, BuildSoapFolderObjects_1.buildFolderPathsSoap)(folderResponse.full),
                    this.sfmc.emailStudio.getAssetsByFolderArray(isolateFolderIds),
                ]);
                const buildFolderPaths = (assetsAndFoldersRequest && assetsAndFoldersRequest[0]) || [];
                const assetResponse = (assetsAndFoldersRequest && assetsAndFoldersRequest[1]) || [];
                let dataExtensionsResults = assetResponse &&
                    assetResponse.Results &&
                    assetResponse.Results.length
                    ? assetResponse.Results
                    : [];
                let formattedAssets;
                if (dataExtensionsResults && dataExtensionsResults.length) {
                    dataExtensionsResults = dataExtensionsResults.filter(Boolean);
                    formattedAssets =
                        (yield Promise.all(dataExtensionsResults.map((dataExtension) => {
                            if (!dataExtension.Name)
                                return;
                            return (this.sfmc.emailStudio.retrieveDataExtensionPayloadByName(dataExtension.Name, complete, shared) || null);
                        }))) || [];
                }
                const formattedFolders = (buildFolderPaths.folders &&
                    buildFolderPaths.folders.length &&
                    buildFolderPaths.folders.map((folder) => {
                        return {
                            id: folder.ID,
                            name: folder.Name,
                            parentId: folder.ParentFolder.ID,
                            folderPath: folder.FolderPath,
                        };
                    })) ||
                    [];
                return {
                    folders: formattedFolders || [],
                    assets: formattedAssets || [],
                };
            }
            catch (err) {
                return err;
            }
        });
        /**
         *
         * @param assetId
         */
        this.gatherAssetById = (customerKey, complete = false, shared = false) => __awaiter(this, void 0, void 0, function* () {
            try {
                if (!customerKey) {
                    throw new Error('customerKey is required');
                }
                // Accounts for LegacyIds and Content Builder AssetIds
                let dataExtensionPayload = yield this.sfmc.emailStudio.retrieveDataExtensionPayloadByCustomerKey(customerKey, complete, shared);
                if (!dataExtensionPayload) {
                    throw new Error('Data Extension Not Found');
                }
                const categoryId = dataExtensionPayload &&
                    dataExtensionPayload.category.categoryId;
                const dataExtensionFolderObject = yield this.sfmc.folder.getFolder({
                    contentType: shared ? 'shared_dataextension' : 'dataextension',
                    categoryId,
                });
                if (dataExtensionFolderObject &&
                    !dataExtensionFolderObject.Results) {
                    throw new Error('No Folders Found');
                }
                let parentFolders = yield this.sfmc.folder.getParentFoldersRecursive({
                    contentType: shared
                        ? 'shared_dataextension'
                        : 'dataextension',
                    categoryId,
                });
                const buildFolderPaths = yield (0, BuildSoapFolderObjects_1.buildFolderPathsSoap)([
                    ...parentFolders.results,
                    ...dataExtensionFolderObject.Results,
                ]);
                const formattedFolders = (buildFolderPaths &&
                    buildFolderPaths.folders &&
                    buildFolderPaths.folders.length &&
                    buildFolderPaths.folders.map((folder) => {
                        return {
                            id: folder.ID,
                            name: folder.Name,
                            parentId: folder.ParentFolder.ID,
                            folderPath: folder.FolderPath,
                        };
                    })) ||
                    [];
                return {
                    folders: formattedFolders,
                    assets: [dataExtensionPayload] || [],
                };
            }
            catch (err) {
                return {
                    status: 'error',
                    statusMessage: err.message || err,
                };
            }
        });
        this.sfmc = sfmc;
    }
}
exports.EmailStudio = EmailStudio;
