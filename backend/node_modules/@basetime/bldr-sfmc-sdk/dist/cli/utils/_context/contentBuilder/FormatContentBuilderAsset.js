"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatContentBuilderAssets = void 0;
const index_1 = require("../../index");
/**
 * Format raw API response to be slimmed down object
 *
 * @param asset
 * @param folders
 * @returns
 */
const setAssetPostObject = (asset, folders) => {
    // Generate new bldrId for asset
    const bldrId = (0, index_1.guid)();
    // Find Compiled Folder Path from Folders Array
    const findAssetsFolderObject = folders.find((folder) => folder.ID === asset.category.id ||
        folder.ParentFolder.ID === asset.category.id);
    // Set Assets folderPath or initiate as blank
    const folderPath = findAssetsFolderObject
        ? findAssetsFolderObject.FolderPath
        : '';
    // Create JSON structure for new asset post
    let post = {
        id: asset.id,
        bldrId,
        name: asset.name,
        customerKey: asset.customerKey,
        assetType: asset.assetType,
        category: {
            id: asset.category.id,
            name: asset.category.name,
            parentId: asset.category.parentId,
            folderPath,
        },
    };
    if (asset.content) {
        post.content = asset.content;
    }
    if (asset.meta) {
        post.meta = asset.meta;
    }
    if (asset.slots) {
        post.slots = asset.slots;
    }
    if (asset.views) {
        post.views = asset.views;
    }
    if (asset.legacyData) {
        post.legacyData = asset.legacyData;
    }
    if (asset.businessUnitAvailability) {
        post.businessUnitAvailability = asset.businessUnitAvailability;
    }
    if (asset.sharingProperties) {
        post.sharingProperties = asset.sharingProperties;
    }
    // if (asset.assetType.displayName === 'Image') {
    //     post.name =
    //         asset.name.indexOf('.') === -1
    //             ? asset.name
    //             : asset.name.substring(0, asset.name.indexOf('.'));
    //     post.publishedURL = asset.fileProperties.publishedURL;
    //     post.file = await this.bldr.asset.getImageFile(asset.id);
    // }
    return post;
};
/**
 * Method to format API response from SFMC into minimum required POST/PUT JSON objects
 * Updates Category object with full folder paths
 * Gathers additional data for Image assets
 *
 * @param {object} results from API Request
 * @param {object} folderPaths category object
 * @returns {object} Array of formatted asset payloads
 */
const formatContentBuilderAssets = (results, folders) => __awaiter(void 0, void 0, void 0, function* () {
    if (Array.isArray(results) && results.length !== 0) {
        const formatAllResults = yield Promise.all(results.map((result) => setAssetPostObject(result, folders)));
        return formatAllResults;
    }
    else if (Array.isArray(results) && results.length === 0) {
        return [];
    }
    else if (!Array.isArray(results)) {
        return setAssetPostObject(results, folders);
    }
});
exports.formatContentBuilderAssets = formatContentBuilderAssets;
