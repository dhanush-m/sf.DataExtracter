"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Account = void 0;
const { getProperties } = require('sfmc-soap-object-reference');
const ListDefinition = getProperties('List');
const AccountDefinition = getProperties('Account');
class Account {
    constructor(client) {
        this.client = client;
    }
    getAccessTokenResponse() {
        return __awaiter(this, void 0, void 0, function* () {
            const tokenResponse = yield this.client.auth.getAccessToken();
            return tokenResponse;
        });
    }
    /**
     * Retrieve SFMC Account details for an instance
     * @returns
     */
    getInstanceDetails() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const request = yield this.client.soap.retrieve('List', ListDefinition, {
                    QueryAllAccounts: true,
                    filter: {
                        leftOperand: 'ListName',
                        operator: 'equals',
                        rightOperand: 'All Subscribers',
                    },
                });
                if (request.OverallStatus.includes('Error:')) {
                    throw new Error(request.OverallStatus);
                }
                return request;
            }
            catch (err) {
                return err;
            }
        });
    }
    /**
     * Get a single Business Units details
     *
     * @param {number} mid
     * @returns
     */
    getBusinessUnitDetails(mid) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const request = yield this.client.soap.retrieve('Account', AccountDefinition, {
                    QueryAllAccounts: true,
                    filter: {
                        leftOperand: 'ID',
                        operator: 'equals',
                        rightOperand: mid,
                    },
                });
                if (request.OverallStatus.includes('Error:'))
                    throw new Error(request.OverallStatus);
                return request;
            }
            catch (err) {
                return err;
            }
        });
    }
    getAllBusinessUnitDetails(mids) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const businessUnitDetails = [];
                let midsArray;
                if (mids && Array.isArray(mids)) {
                    midsArray = mids;
                }
                if (mids && !Array.isArray(mids)) {
                    midsArray = [mids];
                }
                else {
                    // If no argument is passed, get all Business Unit Details
                    const getAllMidsRequest = yield this.getInstanceDetails();
                    if (getAllMidsRequest &&
                        getAllMidsRequest.OverallStatus !== 'OK') {
                        throw new Error(getAllMidsRequest.OverallStatus);
                    }
                    midsArray =
                        (getAllMidsRequest &&
                            getAllMidsRequest.Results &&
                            getAllMidsRequest.Results.length &&
                            getAllMidsRequest.Results.map((BU) => {
                                return BU.Client.ID;
                            })) ||
                            [];
                }
                if (midsArray && midsArray.length) {
                    for (let m in midsArray) {
                        const mid = midsArray[m];
                        const businessUnitDetail = mid && (yield this.getBusinessUnitDetails(mid));
                        businessUnitDetail &&
                            businessUnitDetail.Results &&
                            businessUnitDetails.push(...businessUnitDetail.Results);
                    }
                }
                return businessUnitDetails;
            }
            catch (err) {
                return err.message;
            }
        });
    }
}
exports.Account = Account;
