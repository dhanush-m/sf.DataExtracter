import { Client } from '../types/sfmc_client';
export declare class Automation {
    client: Client;
    constructor(client: Client);
    /**
     * Search for Automations by SOAP API
     * @param {string} request.searchKey
     * @param {string} request.searchTerm
     * @returns
     */
    searchAutomations(request: {
        searchKey: string;
        searchTerm: string;
    }): Promise<any>;
    /**
     * Search for Automation Studio Activity by Type and Name
     *
     * @param {string} request.searchActivity
     * @param {string} request.searchTerm
     * @returns
     */
    searchActivityByName(request: {
        searchActivity: string;
        searchTerm: string;
    }): Promise<any>;
    /**
     * Search for Automation Studio Activity by Type and Name
     *
     * @param {string} request.searchActivity
     * @param {string} request.searchTerm
     * @returns
     */
    searchActivityByCategoryId(request: {
        searchActivity: string;
        categoryId: string;
    }): Promise<any>;
    /**
     * Retrieve multiple automations from array of categoryIds
     *
     * @param {number[]} categoryIds
     * @returns
     */
    getAssetsByFolderArray(categoryIds: number[]): Promise<object[]>;
    /**
     * Retrieve an automation by automation key
     *
     * @param {string} automationKey
     * @returns {Promise<void>}
     */
    getAutomationByKey(automationKey: string): Promise<void>;
    /**
     * Retrieve multiple automations by automation keys array
     *
     * @param {string[]} automationKeys
     * @returns {Promise<void>}
     */
    getAutomationsByKey(automationKeys: string[]): Promise<object[]>;
    /**
     * Retrieve automation activity details
     *
     * @param request.assetType
     * @param request.activityObjectId
     * @returns
     */
    getAutomationActivity(request: {
        activityType: string;
        activityObjectId: string;
    }): Promise<any>;
    /**
     *
     * @param automation {object}
     * @returns
     */
    getAutomationActivities(automation: {
        steps: {
            activities: {
                objectTypeId: number;
                activityObjectId: string;
            }[];
        }[];
    }): Promise<unknown>;
    retrieveAutomationActivityDefinition(assetType: {
        api: string;
    }, activityObjectId: string): Promise<any>;
    retrieveFilterDefinition(activityDefinitionId: string): Promise<any>;
    /**
     * Retrieve Email Send Definition
     *
     * @param {string} activityObjectId
     * @returns
     */
    getEmailSendDefinitionActivity(activityObjectId: string): Promise<{
        ObjectID: string;
        CustomerKey: string;
        Name: string;
        Description: string;
        CategoryID: number;
        SendClassification: {
            CustomerKey: string;
        };
        SuppressTracking: Boolean;
        IsSendLogging: Boolean;
        SendDefinitionList: {
            PartnerKey: string;
            ObjectID: string;
            List: {
                PartnerKey: string;
                ID: number;
                ObjectID: string;
            }[];
            SendDefinitionListType: number;
            CustomObjectID: string;
            DataSourceTypeID: number;
            IsTestObject: Boolean;
            SalesForceObjectID: string;
            Name: string;
        };
        Email: {
            ID: number;
        };
        BccEmail: string;
        AutoBccEmail: string;
        TestEmailAddr: string;
        EmailSubject: string;
        DynamicEmailSubject: string;
        IsMultipart: Boolean;
        IsWrapped: Boolean;
        DeduplicateByEmail: Boolean;
        ExclusionFilter: string;
        Additional: string;
        CCEmail: string;
    }>;
    searchActivity: (searchActivity: string, searchTerm: string) => Promise<any>;
    /**
     *
     * @param asset
     * @returns
     */
    postAsset: (asset: any) => Promise<any>;
    /**
     *
     * @param asset
     * @returns
     */
    patchAutomationAsset(asset: {
        [key: string]: any;
    }): Promise<any>;
}
