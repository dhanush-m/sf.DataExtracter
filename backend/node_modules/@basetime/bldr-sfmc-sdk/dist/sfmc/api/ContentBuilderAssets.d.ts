import { Client } from '../types/sfmc_client';
export declare class ContentBuilderAsset {
    client: Client;
    constructor(client: Client);
    /**
     * Retrieve Asset Object by assetID
     *
     * @param {number} assetId
     * @returns
     */
    getByAssetId(assetId: number): Promise<any>;
    /**
     * Retrieve Email Asset based on Legacy Asset ID
     *
     * @param {number} assetId
     * @returns
     */
    getAssetByLegacyId(assetId: number): Promise<any>;
    /**
     * Retrieve bulk assets from array of categoryIds
     *
     * @param {number[]} folderIdArray
     * @returns Promise<void>
     */
    getAssetsByFolderArray(folderIdArray: number[]): Promise<any>;
    /**
     * Retrieve Asset Object by asset name and folder name
     *
     * @param request.assetName
     * @param request.assetFolderName
     * @returns
     */
    getAssetByNameAndFolder(request: {
        assetName: string;
        assetFolderName: string;
    }): Promise<any>;
    /**
     * Search for assets based on search property and term
     *
     * @param {string} request.searchKey
     * @param {string} request.searchTerm
     * @returns
     */
    searchAssets(request: {
        searchKey: string;
        searchTerm: string;
    }): Promise<any>;
    /**
     * Create content builder asset
     *
     * @param {number} request.id
     * @param {string} request.name
     * @param {string} request.assetType.name
     * @param {string} request.assetType.displayname
     * @param {number} request.assetType.id
     * @param {number} request.category.id
     * @param {string} request.category.name
     * @param {object} request.content
     * @param {object} request.meta
     * @param {object} request.slots
     * @param {object} request.views
     * @returns
     */
    postAsset(request: {
        id: number;
        name: string;
        assetType: object;
        category: {
            id: number;
            name: string;
        };
        content?: object;
        meta?: object;
        slots?: object;
        views?: object;
    }): Promise<any>;
    /**
     * Create content builder asset
     *
     * @param {number} request.id
     * @param {string} request.name
     * @param {string} request.assetType.name
     * @param {string} request.assetType.displayname
     * @param {number} request.assetType.id
     * @param {number} request.category.id
     * @param {string} request.category.name
     * @param {object} request.content
     * @param {object} request.meta
     * @param {object} request.slots
     * @param {object} request.views
     * @returns
     */
    putAsset(request: {
        id: number;
        name: string;
        assetType: object;
        category: {
            id: number;
            name: string;
        };
        content?: object;
        meta?: object;
        slots?: object;
        views?: object;
    }): Promise<any>;
    /**
     *
     * @param assetId
     */
    deleteAsset(assetId: number): Promise<any>;
    /**
     * Get Image data from Image assetId
     * Will also grab the base64 file data and add it to the fileProperties object
     *
     * @param {number} assetId
     * @returns
     */
    getImageData(assetId: number): Promise<any>;
}
