"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContentBuilderAsset = void 0;
const chunkArray_1 = require("../utils/chunkArray");
const handleError_1 = require("../utils/handleError");
const sumByKeys_1 = require("../utils/sumByKeys");
class ContentBuilderAsset {
    constructor(client) {
        this.client = client;
    }
    /**
     * Retrieve Asset Object by assetID
     *
     * @param {number} assetId
     * @returns
     */
    getByAssetId(assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!assetId) {
                    throw new Error('assetId argument is required');
                }
                return this.client.rest.get(`/asset/v1/content/assets/${assetId}`);
            }
            catch (err) {
                return (0, handleError_1.handleError)(err);
            }
        });
    }
    /**
     * Retrieve Email Asset based on Legacy Asset ID
     *
     * @param {number} assetId
     * @returns
     */
    getAssetByLegacyId(assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!assetId) {
                    throw new Error('assetId argument is required');
                }
                return this.client.rest.post('/asset/v1/content/assets/query', {
                    page: {
                        page: 1,
                        pageSize: 200,
                    },
                    query: {
                        property: 'data.email.legacy.legacyId',
                        simpleOperator: 'equal',
                        value: assetId,
                    },
                });
            }
            catch (err) {
                return (0, handleError_1.handleError)(err);
            }
        });
    }
    /**
     * Retrieve bulk assets from array of categoryIds
     *
     * @param {number[]} folderIdArray
     * @returns Promise<void>
     */
    getAssetsByFolderArray(folderIdArray) {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: add auto pagination
            try {
                if (!Array.isArray(folderIdArray)) {
                    throw new Error('folderIdArray argument must be an array');
                }
                const chunkedArrays = yield (0, chunkArray_1.chunk)(folderIdArray, 6);
                const assetRequests = yield Promise.all(chunkedArrays.map((assetArray) => __awaiter(this, void 0, void 0, function* () {
                    return this.client.rest.post('/asset/v1/content/assets/query', {
                        page: {
                            page: 1,
                            pageSize: 200,
                        },
                        query: {
                            property: 'category.id',
                            simpleOperator: 'in',
                            value: assetArray,
                        },
                        sort: [
                            {
                                property: 'id',
                                direction: 'ASC',
                            },
                        ],
                    });
                })));
                return {
                    count: (0, sumByKeys_1.sumByKey)(assetRequests, 'count'),
                    items: (0, sumByKeys_1.concatByKey)(assetRequests, 'items'),
                };
            }
            catch (err) {
                return err;
            }
        });
    }
    /**
     * Retrieve Asset Object by asset name and folder name
     *
     * @param request.assetName
     * @param request.assetFolderName
     * @returns
     */
    getAssetByNameAndFolder(request) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!request.assetName) {
                    throw new Error(`assetName is required`);
                }
                if (!request.assetFolderName) {
                    throw new Error(`assetFolderName is required`);
                }
                return this.client.rest.post('/asset/v1/content/assets/query', {
                    page: {
                        page: 1,
                        pageSize: 200,
                    },
                    query: {
                        leftOperand: {
                            property: 'name',
                            simpleOperator: 'equals',
                            value: request.assetName,
                        },
                        logicalOperator: 'AND',
                        rightOperand: {
                            property: 'category.name',
                            simpleOperator: 'equals',
                            value: request.assetFolderName,
                        },
                    },
                    sort: [
                        {
                            property: 'name',
                            direction: 'DESC',
                        },
                    ],
                });
            }
            catch (err) {
                return err;
            }
        });
    }
    /**
     * Search for assets based on search property and term
     *
     * @param {string} request.searchKey
     * @param {string} request.searchTerm
     * @returns
     */
    searchAssets(request) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return this.client.rest.post('/asset/v1/content/assets/query', {
                    page: {
                        page: 1,
                        pageSize: 200,
                    },
                    query: {
                        property: request.searchKey,
                        simpleOperator: 'like',
                        value: request.searchTerm,
                    },
                    sort: [
                        {
                            property: 'name',
                            direction: 'DESC',
                        },
                    ],
                });
            }
            catch (err) {
                return (0, handleError_1.handleError)(err);
            }
        });
    }
    /**
     * Create content builder asset
     *
     * @param {number} request.id
     * @param {string} request.name
     * @param {string} request.assetType.name
     * @param {string} request.assetType.displayname
     * @param {number} request.assetType.id
     * @param {number} request.category.id
     * @param {string} request.category.name
     * @param {object} request.content
     * @param {object} request.meta
     * @param {object} request.slots
     * @param {object} request.views
     * @returns
     */
    postAsset(request) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return this.client.rest.post(`/asset/v1/content/assets/`, request);
            }
            catch (err) {
                return err;
            }
        });
    }
    /**
     * Create content builder asset
     *
     * @param {number} request.id
     * @param {string} request.name
     * @param {string} request.assetType.name
     * @param {string} request.assetType.displayname
     * @param {number} request.assetType.id
     * @param {number} request.category.id
     * @param {string} request.category.name
     * @param {object} request.content
     * @param {object} request.meta
     * @param {object} request.slots
     * @param {object} request.views
     * @returns
     */
    putAsset(request) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!request.id) {
                    throw new Error('Asset Id is required');
                }
                const assetId = request.id;
                return this.client.rest.put(`/asset/v1/content/assets/${assetId}`, request);
            }
            catch (err) {
                return err;
            }
        });
    }
    /**
     *
     * @param assetId
     */
    deleteAsset(assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!assetId) {
                    throw new Error('Asset Id is required');
                }
                console.log(assetId);
                const apiRequest = yield this.client.rest.delete(`/asset/v1/content/assets/${assetId}`);
                console.log('apiRequest', apiRequest);
                return apiRequest;
            }
            catch (err) {
                console.log('(e)', err);
                return err;
            }
        });
    }
    /**
     * Get Image data from Image assetId
     * Will also grab the base64 file data and add it to the fileProperties object
     *
     * @param {number} assetId
     * @returns
     */
    getImageData(assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!assetId) {
                    throw new Error('Asset Id is required');
                }
                let apiRequest = yield this.client.rest.get(`/asset/v1/content/assets/${assetId}`);
                if (apiRequest &&
                    Object.prototype.hasOwnProperty.call(apiRequest, 'fileProperties')) {
                    apiRequest.fileProperties.fileData = yield this.client.rest.get(`/asset/v1/content/assets/${assetId}/file`);
                }
                return apiRequest;
            }
            catch (err) {
                return err;
            }
        });
    }
}
exports.ContentBuilderAsset = ContentBuilderAsset;
