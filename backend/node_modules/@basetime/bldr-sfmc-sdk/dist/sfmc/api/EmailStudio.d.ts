import { FieldTypes } from '../types/objects/sfmc_data_extension_assets';
import { Client } from '../types/sfmc_client';
export declare class EmailStudio {
    client: Client;
    folder: any;
    constructor(client: Client, folder: any);
    /**
     * Search for Automations by SOAP API
     * @param {string} request.searchKey
     * @param {string} request.searchTerm
     * @returns
     */
    searchEmailSendDefinition: (request: {
        searchKey: string;
        searchTerm: string;
    }) => Promise<any>;
    /**
     * Retrieve Email Send Definition
     *
     * @param {string} activityObjectId
     * @returns
     */
    getEmailSendDefinitionActivity: (ObjectID: string) => Promise<{
        ObjectID: string;
        CustomerKey: string;
        Name: string;
        Description: string;
        CategoryID: number;
        SendClassification: {
            CustomerKey: string;
        };
        SuppressTracking: Boolean;
        IsSendLogging: Boolean;
        SendDefinitionList: {
            PartnerKey: string;
            ObjectID: string;
            List: {
                PartnerKey: string;
                ID: number;
                ObjectID: string;
            };
            SendDefinitionListType: number;
            CustomObjectID: string;
            DataSourceTypeID: number;
            IsTestObject: Boolean;
            SalesForceObjectID: string;
            Name: string;
        };
        Email: {
            ID: number;
        };
        BccEmail: string;
        AutoBccEmail: string;
        TestEmailAddr: string;
        EmailSubject: string;
        DynamicEmailSubject: string;
        IsMultipart: Boolean;
        IsWrapped: Boolean;
        DeduplicateByEmail: Boolean;
        ExclusionFilter: string;
        Additional: string;
        CCEmail: string;
    }>;
    /**
     *
     * @param dataExtensionName
     * @returns
     */
    searchDataExtensionByName: (request: {
        searchKey: string;
        searchTerm: string;
    }) => Promise<any>;
    getAssetsByFolderArray: (folderIdArray: number[]) => Promise<any>;
    /**
     *
     * @param dataExtensionName
     * @returns
     */
    retrieveDataExtensionPayloadByName: (dataExtensionName: string, complete?: boolean, shared?: boolean) => Promise<{
        objectId: string;
        bldrId: string;
        name: string;
        customerKey: string;
        description: string;
        fields: FieldTypes[];
        category: {
            categoryId: number;
            folderPath: string;
        };
        isSendable?: Boolean | undefined;
        sendableDataExtensionField?: {
            name: string;
            fieldType: string;
        } | undefined;
        sendableSubscriberField?: {
            name: string;
        } | undefined;
        dataRetentionPeriodLength?: number | undefined;
        dataRetentionPeriod?: string | undefined;
        deleteAtEndOfRetentionPeriod?: Boolean | undefined;
        rowBasedRetention?: Boolean | undefined;
        resetRetentionPeriodOnImport?: Boolean | undefined;
        dataRetentionPeriodUnitOfMeasure?: number | undefined;
    } | undefined>;
    /**
     *
     * @param dataExtensionName
     * @returns
     */
    retrieveDataExtensionPayloadByCustomerKey: (customerKey: string, complete?: boolean, shared?: boolean) => Promise<{
        objectId: string;
        bldrId: string;
        name: string;
        customerKey: string;
        description: string;
        fields: FieldTypes[];
        category: {
            categoryId: number;
            folderPath: string;
        };
        isSendable?: Boolean | undefined;
        sendableDataExtensionField?: {
            name: string;
            fieldType: string;
        } | undefined;
        sendableSubscriberField?: {
            name: string;
        } | undefined;
        dataRetentionPeriodLength?: number | undefined;
        dataRetentionPeriod?: string | undefined;
        deleteAtEndOfRetentionPeriod?: Boolean | undefined;
        rowBasedRetention?: Boolean | undefined;
        resetRetentionPeriodOnImport?: Boolean | undefined;
        dataRetentionPeriodUnitOfMeasure?: number | undefined;
    } | undefined>;
    getDataExtensionPayload: (dataExtension: any, shared?: boolean) => Promise<{
        objectId: string;
        bldrId: string;
        name: string;
        customerKey: string;
        description: string;
        fields: FieldTypes[];
        category: {
            categoryId: number;
            folderPath: string;
        };
        isSendable?: Boolean | undefined;
        sendableDataExtensionField?: {
            name: string;
            fieldType: string;
        } | undefined;
        sendableSubscriberField?: {
            name: string;
        } | undefined;
        dataRetentionPeriodLength?: number | undefined;
        dataRetentionPeriod?: string | undefined;
        deleteAtEndOfRetentionPeriod?: Boolean | undefined;
        rowBasedRetention?: Boolean | undefined;
        resetRetentionPeriodOnImport?: Boolean | undefined;
        dataRetentionPeriodUnitOfMeasure?: number | undefined;
    } | undefined>;
    getDataExtensionPayloadComplete: (dataExtension: any, shared?: boolean) => Promise<{
        objectId: string;
        bldrId: string;
        name: string;
        customerKey: string;
        description: string;
        fields: FieldTypes[];
        category: {
            categoryId: number;
            folderPath: string;
        };
        isSendable?: Boolean | undefined;
        sendableDataExtensionField?: {
            name: string;
            fieldType: string;
        } | undefined;
        sendableSubscriberField?: {
            name: string;
        } | undefined;
        dataRetentionPeriodLength?: number | undefined;
        dataRetentionPeriod?: string | undefined;
        deleteAtEndOfRetentionPeriod?: Boolean | undefined;
        rowBasedRetention?: Boolean | undefined;
        resetRetentionPeriodOnImport?: Boolean | undefined;
        dataRetentionPeriodUnitOfMeasure?: number | undefined;
    } | undefined>;
    /**
     *
     * @param customerKey
     * @returns
     */
    getDataExtensionFields: (customerKey: string) => Promise<any>;
    postAsset: (dataExtension: {
        name: string;
        customerKey: string;
        description: string;
        fields: {
            name: string;
            defaultValue: any;
            maxLength?: number;
            isPrimaryKey: Boolean;
            isRequired: Boolean;
            fieldType: string;
            ordinal: number;
            scale?: number;
        }[];
        categoryId: number;
        isSendable?: Boolean;
        sendableDataExtensionField?: {
            name: string;
            fieldType: string;
        };
        sendableSubscriberField?: {
            name: string;
        };
        dataRetentionPeriodLength?: number;
        dataRetentionPeriod?: string;
        rowBasedRetention?: Boolean;
        resetRetentionPeriodOnImport?: Boolean;
        retainUntil?: string;
    }) => Promise<any>;
    mapFieldObj: (fields: {
        name: string;
        defaultValue: any;
        maxLength?: number;
        isPrimaryKey: Boolean;
        isRequired: Boolean;
        fieldType: string;
        ordinal: number;
        scale?: number;
    }[]) => any[];
}
