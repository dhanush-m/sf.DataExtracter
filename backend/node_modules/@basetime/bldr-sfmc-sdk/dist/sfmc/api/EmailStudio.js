"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailStudio = void 0;
const utils_1 = require("../../cli/utils");
const BuildSoapFolderObjects_1 = require("../../cli/utils/BuildSoapFolderObjects");
const chunkArray_1 = require("../utils/chunkArray");
const handleError_1 = require("../utils/handleError");
const modifyObject_1 = require("../utils/modifyObject");
const { getProperties } = require('sfmc-soap-object-reference');
const emailSendDefinition = getProperties('EmailSendDefinition');
const dataExtensionDefinition = getProperties('DataExtension');
const dataExtensionDefinitionField = getProperties('DataExtensionField');
class EmailStudio {
    constructor(client, folder) {
        /**
         * Search for Automations by SOAP API
         * @param {string} request.searchKey
         * @param {string} request.searchTerm
         * @returns
         */
        this.searchEmailSendDefinition = (request) => __awaiter(this, void 0, void 0, function* () {
            try {
                return this.client.soap.retrieveBulk('Program', emailSendDefinition, {
                    filter: {
                        leftOperand: request.searchKey,
                        operator: 'like',
                        rightOperand: request.searchTerm,
                    },
                });
            }
            catch (err) {
                return (0, handleError_1.handleError)(err);
            }
        });
        /**
         * Retrieve Email Send Definition
         *
         * @param {string} activityObjectId
         * @returns
         */
        this.getEmailSendDefinitionActivity = (ObjectID) => __awaiter(this, void 0, void 0, function* () {
            try {
                const sendDefinitionResponse = yield this.client.soap.retrieve('EmailSendDefinition', emailSendDefinition, {
                    filter: {
                        leftOperand: 'ObjectID',
                        operator: 'equals',
                        rightOperand: ObjectID,
                    },
                });
                if (sendDefinitionResponse.OverallStatus !== 'OK' ||
                    sendDefinitionResponse.Results.length === 0) {
                    throw new Error(sendDefinitionResponse.OverallStatus);
                }
                const result = sendDefinitionResponse.Results[0];
                return {
                    ObjectID: result.ObjectID,
                    CustomerKey: result.CustomerKey,
                    Name: result.Name,
                    Description: result.Description,
                    CategoryID: result.CategoryID,
                    SendClassification: {
                        CustomerKey: result.SendClassification.CustomerKey,
                    },
                    SuppressTracking: result.SuppressTracking,
                    IsSendLogging: result.IsSendLogging,
                    SendDefinitionList: {
                        PartnerKey: result.SendDefinitionList.PartnerKey,
                        ObjectID: result.SendDefinitionList.ObjectID,
                        List: {
                            PartnerKey: result.SendDefinitionList.PartnerKey,
                            ID: result.SendDefinitionList.ID,
                            ObjectID: result.SendDefinitionList.ObjectID,
                        },
                        SendDefinitionListType: result.SendDefinitionList.SendDefinitionListType,
                        CustomObjectID: result.SendDefinitionList.CustomObjectID,
                        DataSourceTypeID: result.SendDefinitionList.DataSourceTypeID,
                        IsTestObject: result.SendDefinitionList.IsTestObject,
                        SalesForceObjectID: result.SendDefinitionList.SalesForceObjectID,
                        Name: result.SendDefinitionList.Name,
                    },
                    Email: {
                        ID: result.Email.ID,
                    },
                    BccEmail: result.BccEmail,
                    AutoBccEmail: result.AutoBccEmail,
                    TestEmailAddr: result.TestEmailAddr,
                    EmailSubject: result.EmailSubject,
                    DynamicEmailSubject: result.DynamicEmailSubject,
                    IsMultipart: result.IsMultipart,
                    IsWrapped: result.IsWrapped,
                    DeduplicateByEmail: result.DeduplicateByEmail,
                    ExclusionFilter: result.ExclusionFilter,
                    Additional: result.Additional,
                    CCEmail: result.CCEmail,
                };
            }
            catch (err) {
                return err;
            }
        });
        /**
         *
         * @param dataExtensionName
         * @returns
         */
        this.searchDataExtensionByName = (request) => __awaiter(this, void 0, void 0, function* () {
            return this.client.soap.retrieve('DataExtension', dataExtensionDefinition, {
                filter: {
                    leftOperand: request.searchKey,
                    operator: 'like',
                    rightOperand: request.searchTerm,
                },
            });
        });
        this.getAssetsByFolderArray = (folderIdArray) => __awaiter(this, void 0, void 0, function* () {
            try {
                const chunkedArrays = yield (0, chunkArray_1.chunk)(folderIdArray, 6);
                const dataExtensionRequest = yield Promise.all(chunkedArrays.map((assetArray) => {
                    return this.client.soap.retrieve('DataExtension', dataExtensionDefinition, {
                        filter: {
                            leftOperand: 'CategoryID',
                            operator: assetArray && assetArray.length > 1
                                ? 'IN'
                                : 'equals',
                            rightOperand: assetArray && assetArray.length > 1
                                ? assetArray
                                : assetArray[0],
                        },
                    });
                }));
                const overallStatusArray = dataExtensionRequest &&
                    dataExtensionRequest.map((request) => request.OverallStatus);
                const resultsArray = dataExtensionRequest &&
                    dataExtensionRequest.map((request) => request.Results).flat();
                const output = {
                    OverallStatus: overallStatusArray &&
                        overallStatusArray.every((status) => status === 'OK')
                        ? 'OK'
                        : overallStatusArray,
                    Results: resultsArray,
                };
                return output;
            }
            catch (err) {
                return err;
            }
        });
        /**
         *
         * @param dataExtensionName
         * @returns
         */
        this.retrieveDataExtensionPayloadByName = (dataExtensionName, complete = false, shared = false) => __awaiter(this, void 0, void 0, function* () {
            const dataExtension = yield this.client.soap.retrieve('DataExtension', dataExtensionDefinition, {
                filter: {
                    leftOperand: 'Name',
                    operator: 'equals',
                    rightOperand: dataExtensionName,
                },
            });
            return dataExtension && dataExtension.Results && complete === false
                ? this.getDataExtensionPayload(dataExtension, shared)
                : this.getDataExtensionPayloadComplete(dataExtension, shared) ||
                    null;
        });
        /**
         *
         * @param dataExtensionName
         * @returns
         */
        this.retrieveDataExtensionPayloadByCustomerKey = (customerKey, complete = false, shared = false) => __awaiter(this, void 0, void 0, function* () {
            const dataExtension = yield this.client.soap.retrieve('DataExtension', dataExtensionDefinition, {
                filter: {
                    leftOperand: 'CustomerKey',
                    operator: 'equals',
                    rightOperand: customerKey,
                },
            });
            return dataExtension && dataExtension.Results && complete === false
                ? this.getDataExtensionPayload(dataExtension, shared)
                : this.getDataExtensionPayloadComplete(dataExtension, shared) ||
                    null;
        });
        this.getDataExtensionPayload = (dataExtension, shared = false) => __awaiter(this, void 0, void 0, function* () {
            let sendableName;
            let RelatesOnSub;
            let retentionPeriodLength;
            let retentionPeriod;
            let deleteRetentionPeriod;
            let rowRetention;
            let resetRetention;
            let retentionPeriodUnit;
            let sendableFieldType;
            if (Object.prototype.hasOwnProperty.call(dataExtension, 'Results') &&
                Object.prototype.hasOwnProperty.call(dataExtension.Results[0], 'CustomerKey')) {
                const folderPathResponse = yield this.folder.getParentFoldersRecursive({
                    contentType: shared
                        ? 'shared_dataextension'
                        : 'dataextension',
                    categoryId: dataExtension.Results[0].CategoryID,
                });
                const compiledFolderPaths = yield (0, BuildSoapFolderObjects_1.buildFolderPathsSoap)(folderPathResponse.results);
                const dataExtensionFolderObject = compiledFolderPaths.folders.find((folder) => folder.ID === dataExtension.Results[0].CategoryID);
                const FolderPath = dataExtensionFolderObject &&
                    dataExtensionFolderObject.FolderPath;
                const dataExtensionFields = yield this.getDataExtensionFields(dataExtension.Results[0].CustomerKey);
                let sendable = dataExtension.Results[0].IsSendable;
                let retention = dataExtension.Results[0].DataRetentionPeriodLength;
                if (retention && retention > 0) {
                    retention = true;
                }
                if (sendable) {
                    sendableName =
                        dataExtension.Results[0].SendableDataExtensionField.Name;
                    RelatesOnSub =
                        dataExtension.Results[0].SendableSubscriberField.Name;
                }
                if (retention) {
                    retentionPeriodLength =
                        dataExtension.Results[0].DataRetentionPeriodLength;
                    retentionPeriod = dataExtension.Results[0].DataRetentionPeriod;
                    deleteRetentionPeriod =
                        dataExtension.Results[0].DeleteAtEndOfRetentionPeriod;
                    rowRetention = dataExtension.Results[0].RowBasedRetention;
                    resetRetention =
                        dataExtension.Results[0].ResetRetentionPeriodOnImport;
                    retentionPeriodUnit =
                        dataExtension.Results[0].DataRetentionPeriodUnitOfMeasure;
                }
                let fieldLength = dataExtensionFields.Results.length;
                let dataExtensionFieldArr = dataExtensionFields.Results;
                let fieldArray = [];
                // Organize and format DE Field Schema
                for (let a = 0; a < fieldLength; a++) {
                    let fieldObj = dataExtensionFieldArr[a];
                    //Fields that need to be removed prior to creation of new DE
                    delete fieldObj.AttributeMaps;
                    delete fieldObj.CustomerKey;
                    delete fieldObj.ObjectID;
                    if (fieldObj.MaxLength == '' || fieldObj.MaxLength == 0) {
                        delete fieldObj.MaxLength;
                    }
                    delete fieldObj.StorageType;
                    delete fieldObj.DataExtension;
                    delete fieldObj.DataType;
                    delete fieldObj.IsCreatable;
                    delete fieldObj.IsUpdatable;
                    delete fieldObj.IsRetrievable;
                    delete fieldObj.IsQueryable;
                    delete fieldObj.IsFilterable;
                    delete fieldObj.IsPartnerProperty;
                    delete fieldObj.IsAccountProperty;
                    delete fieldObj.PartnerMap;
                    delete fieldObj.Markups;
                    delete fieldObj.Precision;
                    if (fieldObj.FieldType !== 'Decimal') {
                        delete fieldObj.Scale;
                    }
                    delete fieldObj.Label;
                    if (fieldObj.MinLength == '' || fieldObj.MinLength == 0) {
                        delete fieldObj.MinLength;
                    }
                    delete fieldObj.CreatedDate;
                    delete fieldObj.ModifiedDate;
                    delete fieldObj.ID;
                    delete fieldObj.IsRestrictedPicklist;
                    delete fieldObj.PicklistItems;
                    delete fieldObj.IsSendTime;
                    delete fieldObj.DisplayOrder;
                    delete fieldObj.References;
                    delete fieldObj.RelationshipName;
                    delete fieldObj.Status;
                    delete fieldObj.IsContextSpecific;
                    delete fieldObj.Client;
                    delete fieldObj.PartnerProperties;
                    const field = {
                        partnerKey: fieldObj.PartnerKey,
                        name: fieldObj.Name,
                        defaultValue: fieldObj.DefaultValue,
                        maxLength: fieldObj.MaxLength,
                        isRequired: fieldObj.IsRequired,
                        ordinal: fieldObj.Ordinal,
                        isPrimaryKey: fieldObj.IsPrimaryKey,
                        fieldType: fieldObj.FieldType,
                    };
                    if (fieldObj.FieldType === 'Decimal') {
                        field.scale = fieldObj.Scale;
                    }
                    fieldArray.push(field);
                    //set sendable field type
                    if (sendableName == fieldObj.Name) {
                        sendableFieldType = fieldObj.FieldType;
                    }
                    //Reset fieldObj
                    fieldObj = '';
                }
                //Get DE Payload
                let de = {
                    bldrId: (0, utils_1.guid)(),
                    objectId: dataExtension.Results[0].ObjectID,
                    name: dataExtension.Results[0].Name,
                    customerKey: dataExtension.Results[0].CustomerKey,
                    description: dataExtension.Results[0].Description,
                    fields: fieldArray,
                    category: {
                        categoryId: dataExtension.Results[0].CategoryID,
                        folderPath: FolderPath,
                    },
                };
                if (sendable) {
                    if ((RelatesOnSub = '_SubscriberKey')) {
                        RelatesOnSub = 'Subscriber Key';
                    }
                    de.isSendable = true;
                    de.sendableDataExtensionField = {
                        name: sendableName,
                        fieldType: sendableFieldType,
                    };
                    de.sendableSubscriberField = { name: RelatesOnSub };
                }
                if (retention) {
                    de.dataRetentionPeriodLength = retentionPeriodLength;
                    de.dataRetentionPeriod = retentionPeriod;
                    de.deleteAtEndOfRetentionPeriod = deleteRetentionPeriod;
                    de.rowBasedRetention = rowRetention;
                    de.resetRetentionPeriodOnImport = resetRetention;
                    de.dataRetentionPeriodUnitOfMeasure = retentionPeriodUnit;
                }
                return de;
            }
        });
        this.getDataExtensionPayloadComplete = (dataExtension, shared = false) => __awaiter(this, void 0, void 0, function* () {
            let sendableName;
            let RelatesOnSub;
            let retentionPeriodLength;
            let retentionPeriod;
            let deleteRetentionPeriod;
            let rowRetention;
            let resetRetention;
            let retentionPeriodUnit;
            let sendableFieldType;
            if (Object.prototype.hasOwnProperty.call(dataExtension, 'Results') &&
                Object.prototype.hasOwnProperty.call(dataExtension.Results[0], 'CustomerKey')) {
                const folderPathResponse = yield this.folder.getParentFoldersRecursive({
                    contentType: shared
                        ? 'shared_dataextension'
                        : 'dataextension',
                    categoryId: dataExtension.Results[0].CategoryID,
                });
                const compiledFolderPaths = yield (0, BuildSoapFolderObjects_1.buildFolderPathsSoap)(folderPathResponse.results);
                const dataExtensionFolderObject = compiledFolderPaths.folders.find((folder) => folder.ID === dataExtension.Results[0].CategoryID);
                const { FolderPath } = dataExtensionFolderObject;
                const dataExtensionFields = yield this.getDataExtensionFields(dataExtension.Results[0].CustomerKey);
                let sendable = dataExtension.Results[0].IsSendable;
                let retention = dataExtension.Results[0].DataRetentionPeriodLength;
                if (retention && retention > 0) {
                    retention = true;
                }
                if (sendable) {
                    sendableName =
                        dataExtension.Results[0].SendableDataExtensionField.Name;
                    RelatesOnSub =
                        dataExtension.Results[0].SendableSubscriberField.Name;
                }
                if (retention) {
                    retentionPeriodLength =
                        dataExtension.Results[0].DataRetentionPeriodLength;
                    retentionPeriod = dataExtension.Results[0].DataRetentionPeriod;
                    deleteRetentionPeriod =
                        dataExtension.Results[0].DeleteAtEndOfRetentionPeriod;
                    rowRetention = dataExtension.Results[0].RowBasedRetention;
                    resetRetention =
                        dataExtension.Results[0].ResetRetentionPeriodOnImport;
                    retentionPeriodUnit =
                        dataExtension.Results[0].DataRetentionPeriodUnitOfMeasure;
                }
                let fieldLength = dataExtensionFields.Results.length;
                let dataExtensionFieldArr = dataExtensionFields.Results;
                let fieldArray = [];
                // Organize and format DE Field Schema
                for (let a = 0; a < fieldLength; a++) {
                    let fieldObj = dataExtensionFieldArr[a];
                    //set sendable field type
                    if (sendableName == fieldObj.Name) {
                        sendableFieldType = fieldObj.FieldType;
                    }
                    const updatedFieldObj = yield (0, modifyObject_1.lowercaseKeys)(fieldObj);
                    fieldArray.push(updatedFieldObj);
                    //Reset fieldObj
                    fieldObj = '';
                }
                //Get DE Payload
                let de = {
                    bldrId: (0, utils_1.guid)(),
                    objectId: dataExtension.Results[0].ObjectID,
                    name: dataExtension.Results[0].Name,
                    customerKey: dataExtension.Results[0].CustomerKey,
                    description: dataExtension.Results[0].Description,
                    fields: fieldArray,
                    category: {
                        categoryId: dataExtension.Results[0].CategoryID,
                        folderPath: FolderPath,
                    },
                };
                if (sendable) {
                    if ((RelatesOnSub = '_SubscriberKey')) {
                        RelatesOnSub = 'Subscriber Key';
                    }
                    de.isSendable = true;
                    de.sendableDataExtensionField = {
                        name: sendableName,
                        fieldType: sendableFieldType,
                    };
                    de.sendableSubscriberField = { name: RelatesOnSub };
                }
                if (retention) {
                    de.dataRetentionPeriodLength = retentionPeriodLength;
                    de.dataRetentionPeriod = retentionPeriod;
                    de.deleteAtEndOfRetentionPeriod = deleteRetentionPeriod;
                    de.rowBasedRetention = rowRetention;
                    de.resetRetentionPeriodOnImport = resetRetention;
                    de.dataRetentionPeriodUnitOfMeasure = retentionPeriodUnit;
                }
                return de;
            }
        });
        /**
         *
         * @param customerKey
         * @returns
         */
        this.getDataExtensionFields = (customerKey) => __awaiter(this, void 0, void 0, function* () {
            try {
                const resp = yield this.client.soap.retrieve('DataExtensionField', dataExtensionDefinitionField, {
                    filter: {
                        leftOperand: 'DataExtension.CustomerKey',
                        operator: 'equals',
                        rightOperand: customerKey,
                    },
                });
                if (resp.OverallStatus !== 'OK') {
                    throw new Error('Unable to Retrieve Folders');
                }
                return resp;
            }
            catch (err) {
                return err;
            }
        });
        this.postAsset = (dataExtension) => __awaiter(this, void 0, void 0, function* () {
            try {
                const fieldsArr = yield this.mapFieldObj(dataExtension.fields);
                let dataExtensionCreate = {
                    Name: dataExtension.name,
                    CustomerKey: dataExtension.customerKey,
                    Description: dataExtension.description,
                    CategoryID: dataExtension.categoryId,
                    Fields: {
                        Field: fieldsArr,
                    },
                };
                if (dataExtension.isSendable) {
                    dataExtensionCreate.IsSendable = dataExtension.isSendable;
                }
                if (dataExtension.sendableDataExtensionField) {
                    dataExtensionCreate.SendableDataExtensionField = {
                        Name: dataExtension.sendableDataExtensionField.name,
                        FieldType: dataExtension.sendableDataExtensionField.fieldType,
                    };
                }
                if (dataExtension.sendableSubscriberField) {
                    dataExtensionCreate.SendableSubscriberField = {
                        Name: dataExtension.sendableSubscriberField.name,
                    };
                }
                if (dataExtension.dataRetentionPeriodLength) {
                    dataExtensionCreate.DataRetentionPeriodLength =
                        dataExtension.dataRetentionPeriodLength;
                }
                if (dataExtension.dataRetentionPeriod) {
                    dataExtensionCreate.DataRetentionPeriod =
                        dataExtension.dataRetentionPeriod;
                }
                if (dataExtension.rowBasedRetention) {
                    dataExtensionCreate.RowBasedRetention =
                        dataExtension.rowBasedRetention;
                }
                if (dataExtension.resetRetentionPeriodOnImport) {
                    dataExtensionCreate.ResetRetentionPeriodOnImport =
                        dataExtension.resetRetentionPeriodOnImport;
                }
                if (dataExtension.retainUntil) {
                    dataExtensionCreate.RetainUntil = dataExtension.retainUntil;
                }
                return this.client.soap.create('DataExtension', dataExtensionCreate, {});
            }
            catch (err) {
                return err;
            }
        });
        this.mapFieldObj = (fields) => {
            const fieldsObj = (fields &&
                fields.length &&
                fields.map((field) => {
                    return (0, modifyObject_1.capitalizeKeys)(field);
                })) ||
                [];
            return fieldsObj;
        };
        this.client = client;
        this.folder = folder;
    }
}
exports.EmailStudio = EmailStudio;
