import { SFMC_SOAP_Folder } from '../types/objects/sfmc_soap_folders';
import { Client } from '../types/sfmc_client';
import { SFMCContextMapping } from '../types/sfmc_context_mapping';
export declare class Folder {
    client: Client;
    sfmc_context: SFMCContextMapping[];
    constructor(client: Client, sfmc_context_mapping: SFMCContextMapping[]);
    /**
     * Search SFMC Folders using SOAP DataFolder Object
     *
     * @param {string} request.contentType
     * @param {string} request.searchKey
     * @param {string} request.searchTerm
     * @returns
     */
    search(request: {
        contentType: string;
        searchKey?: string;
        searchTerm?: string;
        parentId?: number;
    }): Promise<{
        OverallStatus: string;
        Results: any[];
    }>;
    /**
     * Get a single SFMC Folder Object via SOAP API
     * If subfolders === false id refers to the folder you are retrieving
     * If subfolders === true id refers to the parent folder
     *
     * @param {string} request.contentType
     * @param {number} request.categoryId
     * @returns
     */
    getFolder(request: {
        contentType: string;
        categoryId: number;
    }): Promise<{
        OverallStatus: string;
        Results: SFMC_SOAP_Folder[];
    }>;
    /**
     * Get SFMC Subfolders based on parentId Object via SOAP API
     *
     * @param {string} request.contentType
     * @param {number} request.parentId
     * @returns
     */
    getSubfolders(request: {
        contentType: string;
        parentId: number;
    }): Promise<SFMC_SOAP_Folder[]>;
    /**
     * Method to compile folder path for for Asset Clone
     *
     * @param {string} request.contentType
     * @param {number} request.categoryId
     * @returns {Promise<Object[]>}
     */
    getParentFoldersRecursive(request: {
        contentType: string;
        categoryId: number;
    }): Promise<{
        results: any[];
        stop: Boolean;
    }>;
    /**
     * Method to gather and format all SFMC Folders recursively from top level starting point
     *
     * @param {string} request.contentType
     * @param {integer} request.categoryId
     * @returns
     */
    getSubfoldersRecursive(request: {
        contentType: string;
        categoryId: number;
    }): Promise<unknown>;
    /**
     * Retrieve all folders top and bottom from a specific categoryId
     *
     * @param {string} request.contentType
     * @param {integer} request.categoryId
     * @returns
     */
    getFoldersFromMiddle(request: {
        contentType: string;
        categoryId: number;
    }): Promise<{
        up: {
            results: any[];
            stop: Boolean;
        };
        down: never[];
        full: any[];
    }>;
    /**
     * Create a folder in SFMC via SOAP Data Folder Object
     *
     * @param request.contentType
     * @param request.name
     * @param request.parentId
     * @returns {Promise<void>}
     */
    createFolder(request: {
        contentType: string;
        name: string;
        parentId: number;
    }): Promise<void>;
    /**
     * When a folder exists in SFMC and is created in the UI, it by default does not allow children folders. This function updates that permission on the folder.
     *
     * @param request.contentType
     * @param request.categoryId
     * @returns
     */
    _updateAllowChildren(request: {
        contentType: string;
        categoryId: number;
    }): Promise<any>;
}
