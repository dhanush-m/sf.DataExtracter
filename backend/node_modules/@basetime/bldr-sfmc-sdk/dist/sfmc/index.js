"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SFMC = void 0;
//TODO Separate out SFMC functions into its own package
//TODO Explore possibility of sfmc-sdk to allow oAuth token
const SDK = require('sfmc-sdk');
// Class Imports
const Account_1 = require("../sfmc/api/Account");
const Automation_1 = require("../sfmc/api/Automation");
const ContentBuilderAssets_1 = require("../sfmc/api/ContentBuilderAssets");
const Folder_1 = require("../sfmc/api/Folder");
const sfmcContextMapping_1 = require("./utils/sfmcContextMapping");
const EmailStudio_1 = require("./api/EmailStudio");
/**
 * Creates an instance of BLDR SDK.
 *
 * @param {object} AuthObject Auth Object for making requests
 */
class SFMC {
    constructor(AuthObject) {
        this.client = new SDK(AuthObject, {
            eventHandlers: {
                // onLoop: (type, accumulator) => console.log('Looping', type, accumlator.length),
                // onRefresh: (options) => console.log('RefreshingToken.', Options),
                logRequest: (req) => process.env.NODE_ENV === 'development'
                    ? console.log(req)
                    : null,
                logResponse: (res) => process.env.NODE_ENV === 'development'
                    ? console.log(res)
                    : null,
                onConnectionError: (ex, remainingAttempts) => process.env.NODE_ENV === 'development'
                    ? console.log(ex.code, remainingAttempts)
                    : null,
            },
            requestAttempts: 1,
            retryOnConnectionError: true,
        });
        this.folder = new Folder_1.Folder(this.client, sfmcContextMapping_1.sfmc_context_mapping);
        this.asset = new ContentBuilderAssets_1.ContentBuilderAsset(this.client);
        this.account = new Account_1.Account(this.client);
        this.automation = new Automation_1.Automation(this.client);
        this.emailStudio = new EmailStudio_1.EmailStudio(this.client, this.folder);
        // this.describe = new Describe(this.client.soap);
        // this.dataExtension = new DataExtension(this.client.soap);
        // this.query = new QueryDefinition(this.client.rest, this.client.soap);
    }
}
exports.SFMC = SFMC;
